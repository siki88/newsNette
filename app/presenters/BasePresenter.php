<?php
/**
 * Created by PhpStorm.
 * User: Programovani
 * Date: 2.2.2019
 * Time: 12:37
 */

namespace App\Presenters;

use App\Model;
use Nette;
use Nette\Application\UI\Presenter;


//NAVIC
use App\Model\Entities\User as UserEntity;
use App\Model\Facades\UserFacade;
use App\Model\Facades\NewsFacade;
use App\Model\Facades\EvaluationFacade;
//use Kdyby\Translation\Translator;
//use Nette\Bridges\ApplicationLatte\Template;



class BasePresenter extends Presenter{

    /** @persistent null|string Určuje jazykovou verzi webu. */
 //   public $locale;

    /**
     * @var \Kdyby\Translation\Translator Obstarává jazykový překlad na úrovni presenteru.
     * @inject
     */
//    public $translator;

    /**
     * @var UserFacade Fasáda pro manipulaci s uživateli.
     * @inject
     */
    public $userFacade;

    /** @var UserEntity Entita pro aktuálního uživatele. */
    protected $userEntity;

    /**
     * @var NewsFacade Fasáda pro manipulaci s novinkamy.
     * @inject
     */
    public $newsFacade;

    /**
     * @var EvaluationFacade Fasáda pro manipulaci s hodnocením.
     * @inject
     */
    public $evaluationFacade;


    /**
     * přetížíme metodu startup()
     * Volá se na začátku každé akce, každého presenteru a zajišťuje inicializaci entity uživatele.
     */
    public function startup(){
        parent::startup(); // TODO: Change the autogenerated stub

        /*
        if ($this->getUser()->isLoggedIn()) {
            //pokud je uživatel přihlášený - vložim do entity aktuálního uživatele, uživatele kterého vytáhnu na zíkladě id přihlášeného uživatele
            $this->userEntity = $this->userFacade->getUserId($this->getUser()->getId());
        } else {
            // Abychom mohli použít "$userEntity->isAdmin()", když uživatel není přihlášen.
            //pokud není přihlášený - vytvoříme objekt uživatale s jeho atributy
            $entity = new UserEntity();
            $entity->role = UserEntity::ROLE_USER; //do atributu role přiřadíme roly uživatrele
            $this->userEntity = $entity; //pošlem do entity
        }
        */
    }

    public function afterRender(){
        parent::afterRender(); // TODO: Change the autogenerated stub
    }

    /**
     * Volá se před vykreslením každého presenteru a předává společné proměnné do celkového layoutu webu.
     */
    public function beforeRender(){
        parent::beforeRender(); // TODO: Change the autogenerated stub
        //vkládám do šablony attributy uživatele
        //$this->template->userEntity = $this->userEntity;
    }
}